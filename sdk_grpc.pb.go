// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sdk/sdk.proto

package kaikosdk

import (
	context "context"
	aggregated_price_v1 "github.com/kaikodata/kaiko-go-sdk/stream/aggregated_price_v1"
	aggregated_quote_v2 "github.com/kaikodata/kaiko-go-sdk/stream/aggregated_quote_v2"
	aggregates_direct_exchange_rate_v2 "github.com/kaikodata/kaiko-go-sdk/stream/aggregates_direct_exchange_rate_v2"
	aggregates_ohlcv_v1 "github.com/kaikodata/kaiko-go-sdk/stream/aggregates_ohlcv_v1"
	aggregates_spot_exchange_rate_v2 "github.com/kaikodata/kaiko-go-sdk/stream/aggregates_spot_exchange_rate_v2"
	aggregates_vwap_v1 "github.com/kaikodata/kaiko-go-sdk/stream/aggregates_vwap_v1"
	derivatives_instrument_metrics_v1 "github.com/kaikodata/kaiko-go-sdk/stream/derivatives_instrument_metrics_v1"
	index_forex_rate_v1 "github.com/kaikodata/kaiko-go-sdk/stream/index_forex_rate_v1"
	index_multi_assets_v1 "github.com/kaikodata/kaiko-go-sdk/stream/index_multi_assets_v1"
	index_v1 "github.com/kaikodata/kaiko-go-sdk/stream/index_v1"
	iv_svi_parameters_v1 "github.com/kaikodata/kaiko-go-sdk/stream/iv_svi_parameters_v1"
	market_update_v1 "github.com/kaikodata/kaiko-go-sdk/stream/market_update_v1"
	trades_v1 "github.com/kaikodata/kaiko-go-sdk/stream/trades_v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamAggregatedQuoteServiceV2_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatedQuoteServiceV2/Subscribe"
)

// StreamAggregatedQuoteServiceV2Client is the client API for StreamAggregatedQuoteServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatedQuoteServiceV2Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregated_quote_v2.StreamAggregatedQuoteRequestV2, opts ...grpc.CallOption) (StreamAggregatedQuoteServiceV2_SubscribeClient, error)
}

type streamAggregatedQuoteServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatedQuoteServiceV2Client(cc grpc.ClientConnInterface) StreamAggregatedQuoteServiceV2Client {
	return &streamAggregatedQuoteServiceV2Client{cc}
}

func (c *streamAggregatedQuoteServiceV2Client) Subscribe(ctx context.Context, in *aggregated_quote_v2.StreamAggregatedQuoteRequestV2, opts ...grpc.CallOption) (StreamAggregatedQuoteServiceV2_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatedQuoteServiceV2_ServiceDesc.Streams[0], StreamAggregatedQuoteServiceV2_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatedQuoteServiceV2SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatedQuoteServiceV2_SubscribeClient interface {
	Recv() (*aggregated_quote_v2.StreamAggregatedQuoteResponseV2, error)
	grpc.ClientStream
}

type streamAggregatedQuoteServiceV2SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatedQuoteServiceV2SubscribeClient) Recv() (*aggregated_quote_v2.StreamAggregatedQuoteResponseV2, error) {
	m := new(aggregated_quote_v2.StreamAggregatedQuoteResponseV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatedQuoteServiceV2Server is the server API for StreamAggregatedQuoteServiceV2 service.
// All implementations must embed UnimplementedStreamAggregatedQuoteServiceV2Server
// for forward compatibility
type StreamAggregatedQuoteServiceV2Server interface {
	// Subscribe
	Subscribe(*aggregated_quote_v2.StreamAggregatedQuoteRequestV2, StreamAggregatedQuoteServiceV2_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatedQuoteServiceV2Server()
}

// UnimplementedStreamAggregatedQuoteServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatedQuoteServiceV2Server struct {
}

func (UnimplementedStreamAggregatedQuoteServiceV2Server) Subscribe(*aggregated_quote_v2.StreamAggregatedQuoteRequestV2, StreamAggregatedQuoteServiceV2_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatedQuoteServiceV2Server) mustEmbedUnimplementedStreamAggregatedQuoteServiceV2Server() {
}

// UnsafeStreamAggregatedQuoteServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatedQuoteServiceV2Server will
// result in compilation errors.
type UnsafeStreamAggregatedQuoteServiceV2Server interface {
	mustEmbedUnimplementedStreamAggregatedQuoteServiceV2Server()
}

func RegisterStreamAggregatedQuoteServiceV2Server(s grpc.ServiceRegistrar, srv StreamAggregatedQuoteServiceV2Server) {
	s.RegisterService(&StreamAggregatedQuoteServiceV2_ServiceDesc, srv)
}

func _StreamAggregatedQuoteServiceV2_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregated_quote_v2.StreamAggregatedQuoteRequestV2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatedQuoteServiceV2Server).Subscribe(m, &streamAggregatedQuoteServiceV2SubscribeServer{stream})
}

type StreamAggregatedQuoteServiceV2_SubscribeServer interface {
	Send(*aggregated_quote_v2.StreamAggregatedQuoteResponseV2) error
	grpc.ServerStream
}

type streamAggregatedQuoteServiceV2SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatedQuoteServiceV2SubscribeServer) Send(m *aggregated_quote_v2.StreamAggregatedQuoteResponseV2) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatedQuoteServiceV2_ServiceDesc is the grpc.ServiceDesc for StreamAggregatedQuoteServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatedQuoteServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatedQuoteServiceV2",
	HandlerType: (*StreamAggregatedQuoteServiceV2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatedQuoteServiceV2_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamAggregatedPriceServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatedPriceServiceV1/Subscribe"
)

// StreamAggregatedPriceServiceV1Client is the client API for StreamAggregatedPriceServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatedPriceServiceV1Client interface {
	// Deprecated: Do not use.
	// Subscribe
	Subscribe(ctx context.Context, in *aggregated_price_v1.StreamAggregatedPriceRequestV1, opts ...grpc.CallOption) (StreamAggregatedPriceServiceV1_SubscribeClient, error)
}

type streamAggregatedPriceServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatedPriceServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatedPriceServiceV1Client {
	return &streamAggregatedPriceServiceV1Client{cc}
}

// Deprecated: Do not use.
func (c *streamAggregatedPriceServiceV1Client) Subscribe(ctx context.Context, in *aggregated_price_v1.StreamAggregatedPriceRequestV1, opts ...grpc.CallOption) (StreamAggregatedPriceServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatedPriceServiceV1_ServiceDesc.Streams[0], StreamAggregatedPriceServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatedPriceServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatedPriceServiceV1_SubscribeClient interface {
	Recv() (*aggregated_price_v1.StreamAggregatedPriceResponseV1, error)
	grpc.ClientStream
}

type streamAggregatedPriceServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatedPriceServiceV1SubscribeClient) Recv() (*aggregated_price_v1.StreamAggregatedPriceResponseV1, error) {
	m := new(aggregated_price_v1.StreamAggregatedPriceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatedPriceServiceV1Server is the server API for StreamAggregatedPriceServiceV1 service.
// All implementations must embed UnimplementedStreamAggregatedPriceServiceV1Server
// for forward compatibility
type StreamAggregatedPriceServiceV1Server interface {
	// Deprecated: Do not use.
	// Subscribe
	Subscribe(*aggregated_price_v1.StreamAggregatedPriceRequestV1, StreamAggregatedPriceServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatedPriceServiceV1Server()
}

// UnimplementedStreamAggregatedPriceServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatedPriceServiceV1Server struct {
}

func (UnimplementedStreamAggregatedPriceServiceV1Server) Subscribe(*aggregated_price_v1.StreamAggregatedPriceRequestV1, StreamAggregatedPriceServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatedPriceServiceV1Server) mustEmbedUnimplementedStreamAggregatedPriceServiceV1Server() {
}

// UnsafeStreamAggregatedPriceServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatedPriceServiceV1Server will
// result in compilation errors.
type UnsafeStreamAggregatedPriceServiceV1Server interface {
	mustEmbedUnimplementedStreamAggregatedPriceServiceV1Server()
}

func RegisterStreamAggregatedPriceServiceV1Server(s grpc.ServiceRegistrar, srv StreamAggregatedPriceServiceV1Server) {
	s.RegisterService(&StreamAggregatedPriceServiceV1_ServiceDesc, srv)
}

func _StreamAggregatedPriceServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregated_price_v1.StreamAggregatedPriceRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatedPriceServiceV1Server).Subscribe(m, &streamAggregatedPriceServiceV1SubscribeServer{stream})
}

type StreamAggregatedPriceServiceV1_SubscribeServer interface {
	Send(*aggregated_price_v1.StreamAggregatedPriceResponseV1) error
	grpc.ServerStream
}

type streamAggregatedPriceServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatedPriceServiceV1SubscribeServer) Send(m *aggregated_price_v1.StreamAggregatedPriceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatedPriceServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamAggregatedPriceServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatedPriceServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatedPriceServiceV1",
	HandlerType: (*StreamAggregatedPriceServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatedPriceServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamAggregatesOHLCVServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatesOHLCVServiceV1/Subscribe"
)

// StreamAggregatesOHLCVServiceV1Client is the client API for StreamAggregatesOHLCVServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatesOHLCVServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, opts ...grpc.CallOption) (StreamAggregatesOHLCVServiceV1_SubscribeClient, error)
}

type streamAggregatesOHLCVServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesOHLCVServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesOHLCVServiceV1Client {
	return &streamAggregatesOHLCVServiceV1Client{cc}
}

func (c *streamAggregatesOHLCVServiceV1Client) Subscribe(ctx context.Context, in *aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, opts ...grpc.CallOption) (StreamAggregatesOHLCVServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatesOHLCVServiceV1_ServiceDesc.Streams[0], StreamAggregatesOHLCVServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesOHLCVServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesOHLCVServiceV1_SubscribeClient interface {
	Recv() (*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesOHLCVServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesOHLCVServiceV1SubscribeClient) Recv() (*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1, error) {
	m := new(aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesOHLCVServiceV1Server is the server API for StreamAggregatesOHLCVServiceV1 service.
// All implementations must embed UnimplementedStreamAggregatesOHLCVServiceV1Server
// for forward compatibility
type StreamAggregatesOHLCVServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, StreamAggregatesOHLCVServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatesOHLCVServiceV1Server()
}

// UnimplementedStreamAggregatesOHLCVServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesOHLCVServiceV1Server struct {
}

func (UnimplementedStreamAggregatesOHLCVServiceV1Server) Subscribe(*aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, StreamAggregatesOHLCVServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatesOHLCVServiceV1Server) mustEmbedUnimplementedStreamAggregatesOHLCVServiceV1Server() {
}

// UnsafeStreamAggregatesOHLCVServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatesOHLCVServiceV1Server will
// result in compilation errors.
type UnsafeStreamAggregatesOHLCVServiceV1Server interface {
	mustEmbedUnimplementedStreamAggregatesOHLCVServiceV1Server()
}

func RegisterStreamAggregatesOHLCVServiceV1Server(s grpc.ServiceRegistrar, srv StreamAggregatesOHLCVServiceV1Server) {
	s.RegisterService(&StreamAggregatesOHLCVServiceV1_ServiceDesc, srv)
}

func _StreamAggregatesOHLCVServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesOHLCVServiceV1Server).Subscribe(m, &streamAggregatesOHLCVServiceV1SubscribeServer{stream})
}

type StreamAggregatesOHLCVServiceV1_SubscribeServer interface {
	Send(*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1) error
	grpc.ServerStream
}

type streamAggregatesOHLCVServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesOHLCVServiceV1SubscribeServer) Send(m *aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatesOHLCVServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamAggregatesOHLCVServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatesOHLCVServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesOHLCVServiceV1",
	HandlerType: (*StreamAggregatesOHLCVServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesOHLCVServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamTradesServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamTradesServiceV1/Subscribe"
)

// StreamTradesServiceV1Client is the client API for StreamTradesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTradesServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *trades_v1.StreamTradesRequestV1, opts ...grpc.CallOption) (StreamTradesServiceV1_SubscribeClient, error)
}

type streamTradesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamTradesServiceV1Client(cc grpc.ClientConnInterface) StreamTradesServiceV1Client {
	return &streamTradesServiceV1Client{cc}
}

func (c *streamTradesServiceV1Client) Subscribe(ctx context.Context, in *trades_v1.StreamTradesRequestV1, opts ...grpc.CallOption) (StreamTradesServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTradesServiceV1_ServiceDesc.Streams[0], StreamTradesServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTradesServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTradesServiceV1_SubscribeClient interface {
	Recv() (*trades_v1.StreamTradesResponseV1, error)
	grpc.ClientStream
}

type streamTradesServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamTradesServiceV1SubscribeClient) Recv() (*trades_v1.StreamTradesResponseV1, error) {
	m := new(trades_v1.StreamTradesResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTradesServiceV1Server is the server API for StreamTradesServiceV1 service.
// All implementations must embed UnimplementedStreamTradesServiceV1Server
// for forward compatibility
type StreamTradesServiceV1Server interface {
	// Subscribe
	Subscribe(*trades_v1.StreamTradesRequestV1, StreamTradesServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamTradesServiceV1Server()
}

// UnimplementedStreamTradesServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamTradesServiceV1Server struct {
}

func (UnimplementedStreamTradesServiceV1Server) Subscribe(*trades_v1.StreamTradesRequestV1, StreamTradesServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamTradesServiceV1Server) mustEmbedUnimplementedStreamTradesServiceV1Server() {}

// UnsafeStreamTradesServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTradesServiceV1Server will
// result in compilation errors.
type UnsafeStreamTradesServiceV1Server interface {
	mustEmbedUnimplementedStreamTradesServiceV1Server()
}

func RegisterStreamTradesServiceV1Server(s grpc.ServiceRegistrar, srv StreamTradesServiceV1Server) {
	s.RegisterService(&StreamTradesServiceV1_ServiceDesc, srv)
}

func _StreamTradesServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(trades_v1.StreamTradesRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTradesServiceV1Server).Subscribe(m, &streamTradesServiceV1SubscribeServer{stream})
}

type StreamTradesServiceV1_SubscribeServer interface {
	Send(*trades_v1.StreamTradesResponseV1) error
	grpc.ServerStream
}

type streamTradesServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamTradesServiceV1SubscribeServer) Send(m *trades_v1.StreamTradesResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamTradesServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamTradesServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTradesServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamTradesServiceV1",
	HandlerType: (*StreamTradesServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamTradesServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamAggregatesVWAPServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatesVWAPServiceV1/Subscribe"
)

// StreamAggregatesVWAPServiceV1Client is the client API for StreamAggregatesVWAPServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatesVWAPServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_vwap_v1.StreamAggregatesVWAPRequestV1, opts ...grpc.CallOption) (StreamAggregatesVWAPServiceV1_SubscribeClient, error)
}

type streamAggregatesVWAPServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesVWAPServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesVWAPServiceV1Client {
	return &streamAggregatesVWAPServiceV1Client{cc}
}

func (c *streamAggregatesVWAPServiceV1Client) Subscribe(ctx context.Context, in *aggregates_vwap_v1.StreamAggregatesVWAPRequestV1, opts ...grpc.CallOption) (StreamAggregatesVWAPServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatesVWAPServiceV1_ServiceDesc.Streams[0], StreamAggregatesVWAPServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesVWAPServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesVWAPServiceV1_SubscribeClient interface {
	Recv() (*aggregates_vwap_v1.StreamAggregatesVWAPResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesVWAPServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesVWAPServiceV1SubscribeClient) Recv() (*aggregates_vwap_v1.StreamAggregatesVWAPResponseV1, error) {
	m := new(aggregates_vwap_v1.StreamAggregatesVWAPResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesVWAPServiceV1Server is the server API for StreamAggregatesVWAPServiceV1 service.
// All implementations must embed UnimplementedStreamAggregatesVWAPServiceV1Server
// for forward compatibility
type StreamAggregatesVWAPServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_vwap_v1.StreamAggregatesVWAPRequestV1, StreamAggregatesVWAPServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatesVWAPServiceV1Server()
}

// UnimplementedStreamAggregatesVWAPServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesVWAPServiceV1Server struct {
}

func (UnimplementedStreamAggregatesVWAPServiceV1Server) Subscribe(*aggregates_vwap_v1.StreamAggregatesVWAPRequestV1, StreamAggregatesVWAPServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatesVWAPServiceV1Server) mustEmbedUnimplementedStreamAggregatesVWAPServiceV1Server() {
}

// UnsafeStreamAggregatesVWAPServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatesVWAPServiceV1Server will
// result in compilation errors.
type UnsafeStreamAggregatesVWAPServiceV1Server interface {
	mustEmbedUnimplementedStreamAggregatesVWAPServiceV1Server()
}

func RegisterStreamAggregatesVWAPServiceV1Server(s grpc.ServiceRegistrar, srv StreamAggregatesVWAPServiceV1Server) {
	s.RegisterService(&StreamAggregatesVWAPServiceV1_ServiceDesc, srv)
}

func _StreamAggregatesVWAPServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_vwap_v1.StreamAggregatesVWAPRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesVWAPServiceV1Server).Subscribe(m, &streamAggregatesVWAPServiceV1SubscribeServer{stream})
}

type StreamAggregatesVWAPServiceV1_SubscribeServer interface {
	Send(*aggregates_vwap_v1.StreamAggregatesVWAPResponseV1) error
	grpc.ServerStream
}

type streamAggregatesVWAPServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesVWAPServiceV1SubscribeServer) Send(m *aggregates_vwap_v1.StreamAggregatesVWAPResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatesVWAPServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamAggregatesVWAPServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatesVWAPServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesVWAPServiceV1",
	HandlerType: (*StreamAggregatesVWAPServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesVWAPServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamIndexServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamIndexServiceV1/Subscribe"
)

// StreamIndexServiceV1Client is the client API for StreamIndexServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamIndexServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *index_v1.StreamIndexServiceRequestV1, opts ...grpc.CallOption) (StreamIndexServiceV1_SubscribeClient, error)
}

type streamIndexServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamIndexServiceV1Client(cc grpc.ClientConnInterface) StreamIndexServiceV1Client {
	return &streamIndexServiceV1Client{cc}
}

func (c *streamIndexServiceV1Client) Subscribe(ctx context.Context, in *index_v1.StreamIndexServiceRequestV1, opts ...grpc.CallOption) (StreamIndexServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamIndexServiceV1_ServiceDesc.Streams[0], StreamIndexServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamIndexServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamIndexServiceV1_SubscribeClient interface {
	Recv() (*index_v1.StreamIndexServiceResponseV1, error)
	grpc.ClientStream
}

type streamIndexServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamIndexServiceV1SubscribeClient) Recv() (*index_v1.StreamIndexServiceResponseV1, error) {
	m := new(index_v1.StreamIndexServiceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamIndexServiceV1Server is the server API for StreamIndexServiceV1 service.
// All implementations must embed UnimplementedStreamIndexServiceV1Server
// for forward compatibility
type StreamIndexServiceV1Server interface {
	// Subscribe
	Subscribe(*index_v1.StreamIndexServiceRequestV1, StreamIndexServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamIndexServiceV1Server()
}

// UnimplementedStreamIndexServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamIndexServiceV1Server struct {
}

func (UnimplementedStreamIndexServiceV1Server) Subscribe(*index_v1.StreamIndexServiceRequestV1, StreamIndexServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamIndexServiceV1Server) mustEmbedUnimplementedStreamIndexServiceV1Server() {}

// UnsafeStreamIndexServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamIndexServiceV1Server will
// result in compilation errors.
type UnsafeStreamIndexServiceV1Server interface {
	mustEmbedUnimplementedStreamIndexServiceV1Server()
}

func RegisterStreamIndexServiceV1Server(s grpc.ServiceRegistrar, srv StreamIndexServiceV1Server) {
	s.RegisterService(&StreamIndexServiceV1_ServiceDesc, srv)
}

func _StreamIndexServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(index_v1.StreamIndexServiceRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamIndexServiceV1Server).Subscribe(m, &streamIndexServiceV1SubscribeServer{stream})
}

type StreamIndexServiceV1_SubscribeServer interface {
	Send(*index_v1.StreamIndexServiceResponseV1) error
	grpc.ServerStream
}

type streamIndexServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamIndexServiceV1SubscribeServer) Send(m *index_v1.StreamIndexServiceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamIndexServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamIndexServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamIndexServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamIndexServiceV1",
	HandlerType: (*StreamIndexServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamIndexServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamIndexMultiAssetsServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamIndexMultiAssetsServiceV1/Subscribe"
)

// StreamIndexMultiAssetsServiceV1Client is the client API for StreamIndexMultiAssetsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamIndexMultiAssetsServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *index_multi_assets_v1.StreamIndexMultiAssetsServiceRequestV1, opts ...grpc.CallOption) (StreamIndexMultiAssetsServiceV1_SubscribeClient, error)
}

type streamIndexMultiAssetsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamIndexMultiAssetsServiceV1Client(cc grpc.ClientConnInterface) StreamIndexMultiAssetsServiceV1Client {
	return &streamIndexMultiAssetsServiceV1Client{cc}
}

func (c *streamIndexMultiAssetsServiceV1Client) Subscribe(ctx context.Context, in *index_multi_assets_v1.StreamIndexMultiAssetsServiceRequestV1, opts ...grpc.CallOption) (StreamIndexMultiAssetsServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamIndexMultiAssetsServiceV1_ServiceDesc.Streams[0], StreamIndexMultiAssetsServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamIndexMultiAssetsServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamIndexMultiAssetsServiceV1_SubscribeClient interface {
	Recv() (*index_multi_assets_v1.StreamIndexMultiAssetsServiceResponseV1, error)
	grpc.ClientStream
}

type streamIndexMultiAssetsServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamIndexMultiAssetsServiceV1SubscribeClient) Recv() (*index_multi_assets_v1.StreamIndexMultiAssetsServiceResponseV1, error) {
	m := new(index_multi_assets_v1.StreamIndexMultiAssetsServiceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamIndexMultiAssetsServiceV1Server is the server API for StreamIndexMultiAssetsServiceV1 service.
// All implementations must embed UnimplementedStreamIndexMultiAssetsServiceV1Server
// for forward compatibility
type StreamIndexMultiAssetsServiceV1Server interface {
	// Subscribe
	Subscribe(*index_multi_assets_v1.StreamIndexMultiAssetsServiceRequestV1, StreamIndexMultiAssetsServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamIndexMultiAssetsServiceV1Server()
}

// UnimplementedStreamIndexMultiAssetsServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamIndexMultiAssetsServiceV1Server struct {
}

func (UnimplementedStreamIndexMultiAssetsServiceV1Server) Subscribe(*index_multi_assets_v1.StreamIndexMultiAssetsServiceRequestV1, StreamIndexMultiAssetsServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamIndexMultiAssetsServiceV1Server) mustEmbedUnimplementedStreamIndexMultiAssetsServiceV1Server() {
}

// UnsafeStreamIndexMultiAssetsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamIndexMultiAssetsServiceV1Server will
// result in compilation errors.
type UnsafeStreamIndexMultiAssetsServiceV1Server interface {
	mustEmbedUnimplementedStreamIndexMultiAssetsServiceV1Server()
}

func RegisterStreamIndexMultiAssetsServiceV1Server(s grpc.ServiceRegistrar, srv StreamIndexMultiAssetsServiceV1Server) {
	s.RegisterService(&StreamIndexMultiAssetsServiceV1_ServiceDesc, srv)
}

func _StreamIndexMultiAssetsServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(index_multi_assets_v1.StreamIndexMultiAssetsServiceRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamIndexMultiAssetsServiceV1Server).Subscribe(m, &streamIndexMultiAssetsServiceV1SubscribeServer{stream})
}

type StreamIndexMultiAssetsServiceV1_SubscribeServer interface {
	Send(*index_multi_assets_v1.StreamIndexMultiAssetsServiceResponseV1) error
	grpc.ServerStream
}

type streamIndexMultiAssetsServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamIndexMultiAssetsServiceV1SubscribeServer) Send(m *index_multi_assets_v1.StreamIndexMultiAssetsServiceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamIndexMultiAssetsServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamIndexMultiAssetsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamIndexMultiAssetsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamIndexMultiAssetsServiceV1",
	HandlerType: (*StreamIndexMultiAssetsServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamIndexMultiAssetsServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamMarketUpdateServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamMarketUpdateServiceV1/Subscribe"
)

// StreamMarketUpdateServiceV1Client is the client API for StreamMarketUpdateServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMarketUpdateServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *market_update_v1.StreamMarketUpdateRequestV1, opts ...grpc.CallOption) (StreamMarketUpdateServiceV1_SubscribeClient, error)
}

type streamMarketUpdateServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamMarketUpdateServiceV1Client(cc grpc.ClientConnInterface) StreamMarketUpdateServiceV1Client {
	return &streamMarketUpdateServiceV1Client{cc}
}

func (c *streamMarketUpdateServiceV1Client) Subscribe(ctx context.Context, in *market_update_v1.StreamMarketUpdateRequestV1, opts ...grpc.CallOption) (StreamMarketUpdateServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMarketUpdateServiceV1_ServiceDesc.Streams[0], StreamMarketUpdateServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMarketUpdateServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamMarketUpdateServiceV1_SubscribeClient interface {
	Recv() (*market_update_v1.StreamMarketUpdateResponseV1, error)
	grpc.ClientStream
}

type streamMarketUpdateServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamMarketUpdateServiceV1SubscribeClient) Recv() (*market_update_v1.StreamMarketUpdateResponseV1, error) {
	m := new(market_update_v1.StreamMarketUpdateResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMarketUpdateServiceV1Server is the server API for StreamMarketUpdateServiceV1 service.
// All implementations must embed UnimplementedStreamMarketUpdateServiceV1Server
// for forward compatibility
type StreamMarketUpdateServiceV1Server interface {
	// Subscribe
	Subscribe(*market_update_v1.StreamMarketUpdateRequestV1, StreamMarketUpdateServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamMarketUpdateServiceV1Server()
}

// UnimplementedStreamMarketUpdateServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamMarketUpdateServiceV1Server struct {
}

func (UnimplementedStreamMarketUpdateServiceV1Server) Subscribe(*market_update_v1.StreamMarketUpdateRequestV1, StreamMarketUpdateServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamMarketUpdateServiceV1Server) mustEmbedUnimplementedStreamMarketUpdateServiceV1Server() {
}

// UnsafeStreamMarketUpdateServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMarketUpdateServiceV1Server will
// result in compilation errors.
type UnsafeStreamMarketUpdateServiceV1Server interface {
	mustEmbedUnimplementedStreamMarketUpdateServiceV1Server()
}

func RegisterStreamMarketUpdateServiceV1Server(s grpc.ServiceRegistrar, srv StreamMarketUpdateServiceV1Server) {
	s.RegisterService(&StreamMarketUpdateServiceV1_ServiceDesc, srv)
}

func _StreamMarketUpdateServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(market_update_v1.StreamMarketUpdateRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMarketUpdateServiceV1Server).Subscribe(m, &streamMarketUpdateServiceV1SubscribeServer{stream})
}

type StreamMarketUpdateServiceV1_SubscribeServer interface {
	Send(*market_update_v1.StreamMarketUpdateResponseV1) error
	grpc.ServerStream
}

type streamMarketUpdateServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamMarketUpdateServiceV1SubscribeServer) Send(m *market_update_v1.StreamMarketUpdateResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamMarketUpdateServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamMarketUpdateServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMarketUpdateServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamMarketUpdateServiceV1",
	HandlerType: (*StreamMarketUpdateServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamMarketUpdateServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamAggregatesSpotExchangeRateV2ServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatesSpotExchangeRateV2ServiceV1/Subscribe"
)

// StreamAggregatesSpotExchangeRateV2ServiceV1Client is the client API for StreamAggregatesSpotExchangeRateV2ServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatesSpotExchangeRateV2ServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2RequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeClient, error)
}

type streamAggregatesSpotExchangeRateV2ServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesSpotExchangeRateV2ServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesSpotExchangeRateV2ServiceV1Client {
	return &streamAggregatesSpotExchangeRateV2ServiceV1Client{cc}
}

func (c *streamAggregatesSpotExchangeRateV2ServiceV1Client) Subscribe(ctx context.Context, in *aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2RequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatesSpotExchangeRateV2ServiceV1_ServiceDesc.Streams[0], StreamAggregatesSpotExchangeRateV2ServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesSpotExchangeRateV2ServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeClient interface {
	Recv() (*aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2ResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesSpotExchangeRateV2ServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesSpotExchangeRateV2ServiceV1SubscribeClient) Recv() (*aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2ResponseV1, error) {
	m := new(aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2ResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesSpotExchangeRateV2ServiceV1Server is the server API for StreamAggregatesSpotExchangeRateV2ServiceV1 service.
// All implementations must embed UnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server
// for forward compatibility
type StreamAggregatesSpotExchangeRateV2ServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2RequestV1, StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server()
}

// UnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server struct {
}

func (UnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server) Subscribe(*aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2RequestV1, StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server) mustEmbedUnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server() {
}

// UnsafeStreamAggregatesSpotExchangeRateV2ServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatesSpotExchangeRateV2ServiceV1Server will
// result in compilation errors.
type UnsafeStreamAggregatesSpotExchangeRateV2ServiceV1Server interface {
	mustEmbedUnimplementedStreamAggregatesSpotExchangeRateV2ServiceV1Server()
}

func RegisterStreamAggregatesSpotExchangeRateV2ServiceV1Server(s grpc.ServiceRegistrar, srv StreamAggregatesSpotExchangeRateV2ServiceV1Server) {
	s.RegisterService(&StreamAggregatesSpotExchangeRateV2ServiceV1_ServiceDesc, srv)
}

func _StreamAggregatesSpotExchangeRateV2ServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2RequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesSpotExchangeRateV2ServiceV1Server).Subscribe(m, &streamAggregatesSpotExchangeRateV2ServiceV1SubscribeServer{stream})
}

type StreamAggregatesSpotExchangeRateV2ServiceV1_SubscribeServer interface {
	Send(*aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2ResponseV1) error
	grpc.ServerStream
}

type streamAggregatesSpotExchangeRateV2ServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesSpotExchangeRateV2ServiceV1SubscribeServer) Send(m *aggregates_spot_exchange_rate_v2.StreamAggregatesSpotExchangeRateV2ResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatesSpotExchangeRateV2ServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamAggregatesSpotExchangeRateV2ServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatesSpotExchangeRateV2ServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesSpotExchangeRateV2ServiceV1",
	HandlerType: (*StreamAggregatesSpotExchangeRateV2ServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesSpotExchangeRateV2ServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamAggregatesSpotDirectExchangeRateV2ServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamAggregatesSpotDirectExchangeRateV2ServiceV1/Subscribe"
)

// StreamAggregatesSpotDirectExchangeRateV2ServiceV1Client is the client API for StreamAggregatesSpotDirectExchangeRateV2ServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAggregatesSpotDirectExchangeRateV2ServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2RequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeClient, error)
}

type streamAggregatesSpotDirectExchangeRateV2ServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesSpotDirectExchangeRateV2ServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesSpotDirectExchangeRateV2ServiceV1Client {
	return &streamAggregatesSpotDirectExchangeRateV2ServiceV1Client{cc}
}

func (c *streamAggregatesSpotDirectExchangeRateV2ServiceV1Client) Subscribe(ctx context.Context, in *aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2RequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAggregatesSpotDirectExchangeRateV2ServiceV1_ServiceDesc.Streams[0], StreamAggregatesSpotDirectExchangeRateV2ServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeClient interface {
	Recv() (*aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2ResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeClient) Recv() (*aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2ResponseV1, error) {
	m := new(aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2ResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server is the server API for StreamAggregatesSpotDirectExchangeRateV2ServiceV1 service.
// All implementations must embed UnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server
// for forward compatibility
type StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2RequestV1, StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server()
}

// UnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server struct {
}

func (UnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server) Subscribe(*aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2RequestV1, StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server) mustEmbedUnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server() {
}

// UnsafeStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server will
// result in compilation errors.
type UnsafeStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server interface {
	mustEmbedUnimplementedStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server()
}

func RegisterStreamAggregatesSpotDirectExchangeRateV2ServiceV1Server(s grpc.ServiceRegistrar, srv StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server) {
	s.RegisterService(&StreamAggregatesSpotDirectExchangeRateV2ServiceV1_ServiceDesc, srv)
}

func _StreamAggregatesSpotDirectExchangeRateV2ServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2RequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server).Subscribe(m, &streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeServer{stream})
}

type StreamAggregatesSpotDirectExchangeRateV2ServiceV1_SubscribeServer interface {
	Send(*aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2ResponseV1) error
	grpc.ServerStream
}

type streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesSpotDirectExchangeRateV2ServiceV1SubscribeServer) Send(m *aggregates_direct_exchange_rate_v2.StreamAggregatesDirectExchangeRateV2ResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamAggregatesSpotDirectExchangeRateV2ServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamAggregatesSpotDirectExchangeRateV2ServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAggregatesSpotDirectExchangeRateV2ServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesSpotDirectExchangeRateV2ServiceV1",
	HandlerType: (*StreamAggregatesSpotDirectExchangeRateV2ServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesSpotDirectExchangeRateV2ServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamIndexForexRateServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamIndexForexRateServiceV1/Subscribe"
)

// StreamIndexForexRateServiceV1Client is the client API for StreamIndexForexRateServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamIndexForexRateServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *index_forex_rate_v1.StreamIndexForexRateServiceRequestV1, opts ...grpc.CallOption) (StreamIndexForexRateServiceV1_SubscribeClient, error)
}

type streamIndexForexRateServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamIndexForexRateServiceV1Client(cc grpc.ClientConnInterface) StreamIndexForexRateServiceV1Client {
	return &streamIndexForexRateServiceV1Client{cc}
}

func (c *streamIndexForexRateServiceV1Client) Subscribe(ctx context.Context, in *index_forex_rate_v1.StreamIndexForexRateServiceRequestV1, opts ...grpc.CallOption) (StreamIndexForexRateServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamIndexForexRateServiceV1_ServiceDesc.Streams[0], StreamIndexForexRateServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamIndexForexRateServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamIndexForexRateServiceV1_SubscribeClient interface {
	Recv() (*index_forex_rate_v1.StreamIndexForexRateServiceResponseV1, error)
	grpc.ClientStream
}

type streamIndexForexRateServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamIndexForexRateServiceV1SubscribeClient) Recv() (*index_forex_rate_v1.StreamIndexForexRateServiceResponseV1, error) {
	m := new(index_forex_rate_v1.StreamIndexForexRateServiceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamIndexForexRateServiceV1Server is the server API for StreamIndexForexRateServiceV1 service.
// All implementations must embed UnimplementedStreamIndexForexRateServiceV1Server
// for forward compatibility
type StreamIndexForexRateServiceV1Server interface {
	// Subscribe
	Subscribe(*index_forex_rate_v1.StreamIndexForexRateServiceRequestV1, StreamIndexForexRateServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamIndexForexRateServiceV1Server()
}

// UnimplementedStreamIndexForexRateServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamIndexForexRateServiceV1Server struct {
}

func (UnimplementedStreamIndexForexRateServiceV1Server) Subscribe(*index_forex_rate_v1.StreamIndexForexRateServiceRequestV1, StreamIndexForexRateServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamIndexForexRateServiceV1Server) mustEmbedUnimplementedStreamIndexForexRateServiceV1Server() {
}

// UnsafeStreamIndexForexRateServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamIndexForexRateServiceV1Server will
// result in compilation errors.
type UnsafeStreamIndexForexRateServiceV1Server interface {
	mustEmbedUnimplementedStreamIndexForexRateServiceV1Server()
}

func RegisterStreamIndexForexRateServiceV1Server(s grpc.ServiceRegistrar, srv StreamIndexForexRateServiceV1Server) {
	s.RegisterService(&StreamIndexForexRateServiceV1_ServiceDesc, srv)
}

func _StreamIndexForexRateServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(index_forex_rate_v1.StreamIndexForexRateServiceRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamIndexForexRateServiceV1Server).Subscribe(m, &streamIndexForexRateServiceV1SubscribeServer{stream})
}

type StreamIndexForexRateServiceV1_SubscribeServer interface {
	Send(*index_forex_rate_v1.StreamIndexForexRateServiceResponseV1) error
	grpc.ServerStream
}

type streamIndexForexRateServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamIndexForexRateServiceV1SubscribeServer) Send(m *index_forex_rate_v1.StreamIndexForexRateServiceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamIndexForexRateServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamIndexForexRateServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamIndexForexRateServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamIndexForexRateServiceV1",
	HandlerType: (*StreamIndexForexRateServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamIndexForexRateServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamDerivativesInstrumentMetricsV1_Subscribe_FullMethodName = "/kaikosdk.StreamDerivativesInstrumentMetricsV1/Subscribe"
)

// StreamDerivativesInstrumentMetricsV1Client is the client API for StreamDerivativesInstrumentMetricsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDerivativesInstrumentMetricsV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsRequestV1, opts ...grpc.CallOption) (StreamDerivativesInstrumentMetricsV1_SubscribeClient, error)
}

type streamDerivativesInstrumentMetricsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamDerivativesInstrumentMetricsV1Client(cc grpc.ClientConnInterface) StreamDerivativesInstrumentMetricsV1Client {
	return &streamDerivativesInstrumentMetricsV1Client{cc}
}

func (c *streamDerivativesInstrumentMetricsV1Client) Subscribe(ctx context.Context, in *derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsRequestV1, opts ...grpc.CallOption) (StreamDerivativesInstrumentMetricsV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDerivativesInstrumentMetricsV1_ServiceDesc.Streams[0], StreamDerivativesInstrumentMetricsV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDerivativesInstrumentMetricsV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamDerivativesInstrumentMetricsV1_SubscribeClient interface {
	Recv() (*derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsResponseV1, error)
	grpc.ClientStream
}

type streamDerivativesInstrumentMetricsV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamDerivativesInstrumentMetricsV1SubscribeClient) Recv() (*derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsResponseV1, error) {
	m := new(derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDerivativesInstrumentMetricsV1Server is the server API for StreamDerivativesInstrumentMetricsV1 service.
// All implementations must embed UnimplementedStreamDerivativesInstrumentMetricsV1Server
// for forward compatibility
type StreamDerivativesInstrumentMetricsV1Server interface {
	// Subscribe
	Subscribe(*derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsRequestV1, StreamDerivativesInstrumentMetricsV1_SubscribeServer) error
	mustEmbedUnimplementedStreamDerivativesInstrumentMetricsV1Server()
}

// UnimplementedStreamDerivativesInstrumentMetricsV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamDerivativesInstrumentMetricsV1Server struct {
}

func (UnimplementedStreamDerivativesInstrumentMetricsV1Server) Subscribe(*derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsRequestV1, StreamDerivativesInstrumentMetricsV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamDerivativesInstrumentMetricsV1Server) mustEmbedUnimplementedStreamDerivativesInstrumentMetricsV1Server() {
}

// UnsafeStreamDerivativesInstrumentMetricsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDerivativesInstrumentMetricsV1Server will
// result in compilation errors.
type UnsafeStreamDerivativesInstrumentMetricsV1Server interface {
	mustEmbedUnimplementedStreamDerivativesInstrumentMetricsV1Server()
}

func RegisterStreamDerivativesInstrumentMetricsV1Server(s grpc.ServiceRegistrar, srv StreamDerivativesInstrumentMetricsV1Server) {
	s.RegisterService(&StreamDerivativesInstrumentMetricsV1_ServiceDesc, srv)
}

func _StreamDerivativesInstrumentMetricsV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDerivativesInstrumentMetricsV1Server).Subscribe(m, &streamDerivativesInstrumentMetricsV1SubscribeServer{stream})
}

type StreamDerivativesInstrumentMetricsV1_SubscribeServer interface {
	Send(*derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsResponseV1) error
	grpc.ServerStream
}

type streamDerivativesInstrumentMetricsV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamDerivativesInstrumentMetricsV1SubscribeServer) Send(m *derivatives_instrument_metrics_v1.StreamDerivativesInstrumentMetricsResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamDerivativesInstrumentMetricsV1_ServiceDesc is the grpc.ServiceDesc for StreamDerivativesInstrumentMetricsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamDerivativesInstrumentMetricsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamDerivativesInstrumentMetricsV1",
	HandlerType: (*StreamDerivativesInstrumentMetricsV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamDerivativesInstrumentMetricsV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

const (
	StreamIvSviParametersServiceV1_Subscribe_FullMethodName = "/kaikosdk.StreamIvSviParametersServiceV1/Subscribe"
)

// StreamIvSviParametersServiceV1Client is the client API for StreamIvSviParametersServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamIvSviParametersServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *iv_svi_parameters_v1.StreamIvSviParametersRequestV1, opts ...grpc.CallOption) (StreamIvSviParametersServiceV1_SubscribeClient, error)
}

type streamIvSviParametersServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamIvSviParametersServiceV1Client(cc grpc.ClientConnInterface) StreamIvSviParametersServiceV1Client {
	return &streamIvSviParametersServiceV1Client{cc}
}

func (c *streamIvSviParametersServiceV1Client) Subscribe(ctx context.Context, in *iv_svi_parameters_v1.StreamIvSviParametersRequestV1, opts ...grpc.CallOption) (StreamIvSviParametersServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamIvSviParametersServiceV1_ServiceDesc.Streams[0], StreamIvSviParametersServiceV1_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamIvSviParametersServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamIvSviParametersServiceV1_SubscribeClient interface {
	Recv() (*iv_svi_parameters_v1.StreamIvSviParametersResponseV1, error)
	grpc.ClientStream
}

type streamIvSviParametersServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamIvSviParametersServiceV1SubscribeClient) Recv() (*iv_svi_parameters_v1.StreamIvSviParametersResponseV1, error) {
	m := new(iv_svi_parameters_v1.StreamIvSviParametersResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamIvSviParametersServiceV1Server is the server API for StreamIvSviParametersServiceV1 service.
// All implementations must embed UnimplementedStreamIvSviParametersServiceV1Server
// for forward compatibility
type StreamIvSviParametersServiceV1Server interface {
	// Subscribe
	Subscribe(*iv_svi_parameters_v1.StreamIvSviParametersRequestV1, StreamIvSviParametersServiceV1_SubscribeServer) error
	mustEmbedUnimplementedStreamIvSviParametersServiceV1Server()
}

// UnimplementedStreamIvSviParametersServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStreamIvSviParametersServiceV1Server struct {
}

func (UnimplementedStreamIvSviParametersServiceV1Server) Subscribe(*iv_svi_parameters_v1.StreamIvSviParametersRequestV1, StreamIvSviParametersServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamIvSviParametersServiceV1Server) mustEmbedUnimplementedStreamIvSviParametersServiceV1Server() {
}

// UnsafeStreamIvSviParametersServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamIvSviParametersServiceV1Server will
// result in compilation errors.
type UnsafeStreamIvSviParametersServiceV1Server interface {
	mustEmbedUnimplementedStreamIvSviParametersServiceV1Server()
}

func RegisterStreamIvSviParametersServiceV1Server(s grpc.ServiceRegistrar, srv StreamIvSviParametersServiceV1Server) {
	s.RegisterService(&StreamIvSviParametersServiceV1_ServiceDesc, srv)
}

func _StreamIvSviParametersServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(iv_svi_parameters_v1.StreamIvSviParametersRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamIvSviParametersServiceV1Server).Subscribe(m, &streamIvSviParametersServiceV1SubscribeServer{stream})
}

type StreamIvSviParametersServiceV1_SubscribeServer interface {
	Send(*iv_svi_parameters_v1.StreamIvSviParametersResponseV1) error
	grpc.ServerStream
}

type streamIvSviParametersServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamIvSviParametersServiceV1SubscribeServer) Send(m *iv_svi_parameters_v1.StreamIvSviParametersResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// StreamIvSviParametersServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamIvSviParametersServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamIvSviParametersServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamIvSviParametersServiceV1",
	HandlerType: (*StreamIvSviParametersServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamIvSviParametersServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}
