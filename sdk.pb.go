// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: sdk/sdk.proto

package kaikosdk

import (
	context "context"
	aggregates_ohlcv_v1 "github.com/challengerdeep/kaiko-go-sdk/stream/aggregates_ohlcv_v1"
	aggregates_spot_exchange_rate_v1 "github.com/challengerdeep/kaiko-go-sdk/stream/aggregates_spot_exchange_rate_v1"
	trades_v1 "github.com/challengerdeep/kaiko-go-sdk/stream/trades_v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_sdk_sdk_proto protoreflect.FileDescriptor

var file_sdk_sdk_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x1a, 0x2c, 0x73, 0x64, 0x6b, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f,
	0x68, 0x6c, 0x63, 0x76, 0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3a, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x73,
	0x64, 0x6b, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x86, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x48, 0x4c, 0x43, 0x56,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x12, 0x64, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28, 0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64,
	0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31,
	0x1a, 0x29, 0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x48, 0x4c, 0x43,
	0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x22, 0x00, 0x30, 0x01, 0x32,
	0xa7, 0x01, 0x0a, 0x29, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x12, 0x7a, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x61, 0x69,
	0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x1a,
	0x34, 0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x31, 0x22, 0x00, 0x30, 0x01, 0x32, 0x6b, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x31, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x1f, 0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31,
	0x1a, 0x20, 0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x31, 0x22, 0x00, 0x30, 0x01, 0x42, 0x57, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61,
	0x69, 0x6b, 0x6f, 0x2e, 0x73, 0x64, 0x6b, 0x42, 0x08, 0x53, 0x64, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x64, 0x65, 0x65, 0x70, 0x2f, 0x6b,
	0x61, 0x69, 0x6b, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x3b, 0x6b, 0x61, 0x69, 0x6b,
	0x6f, 0x73, 0x64, 0x6b, 0xaa, 0x02, 0x08, 0x4b, 0x61, 0x69, 0x6b, 0x6f, 0x53, 0x64, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_sdk_sdk_proto_goTypes = []interface{}{
	(*aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1)(nil),                          // 0: kaikosdk.StreamAggregatesOHLCVRequestV1
	(*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1)(nil),  // 1: kaikosdk.StreamAggregatesSpotExchangeRateRequestV1
	(*trades_v1.StreamTradesRequestV1)(nil),                                             // 2: kaikosdk.StreamTradesRequestV1
	(*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1)(nil),                         // 3: kaikosdk.StreamAggregatesOHLCVResponseV1
	(*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1)(nil), // 4: kaikosdk.StreamAggregatesSpotExchangeRateResponseV1
	(*trades_v1.StreamTradesResponseV1)(nil),                                            // 5: kaikosdk.StreamTradesResponseV1
}
var file_sdk_sdk_proto_depIdxs = []int32{
	0, // 0: kaikosdk.StreamAggregatesOHLCVServiceV1.Subscribe:input_type -> kaikosdk.StreamAggregatesOHLCVRequestV1
	1, // 1: kaikosdk.StreamAggregatesSpotExchangeRateServiceV1.Subscribe:input_type -> kaikosdk.StreamAggregatesSpotExchangeRateRequestV1
	2, // 2: kaikosdk.StreamTradesServiceV1.Subscribe:input_type -> kaikosdk.StreamTradesRequestV1
	3, // 3: kaikosdk.StreamAggregatesOHLCVServiceV1.Subscribe:output_type -> kaikosdk.StreamAggregatesOHLCVResponseV1
	4, // 4: kaikosdk.StreamAggregatesSpotExchangeRateServiceV1.Subscribe:output_type -> kaikosdk.StreamAggregatesSpotExchangeRateResponseV1
	5, // 5: kaikosdk.StreamTradesServiceV1.Subscribe:output_type -> kaikosdk.StreamTradesResponseV1
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sdk_sdk_proto_init() }
func file_sdk_sdk_proto_init() {
	if File_sdk_sdk_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sdk_sdk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_sdk_sdk_proto_goTypes,
		DependencyIndexes: file_sdk_sdk_proto_depIdxs,
	}.Build()
	File_sdk_sdk_proto = out.File
	file_sdk_sdk_proto_rawDesc = nil
	file_sdk_sdk_proto_goTypes = nil
	file_sdk_sdk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamAggregatesOHLCVServiceV1Client is the client API for StreamAggregatesOHLCVServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamAggregatesOHLCVServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, opts ...grpc.CallOption) (StreamAggregatesOHLCVServiceV1_SubscribeClient, error)
}

type streamAggregatesOHLCVServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesOHLCVServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesOHLCVServiceV1Client {
	return &streamAggregatesOHLCVServiceV1Client{cc}
}

func (c *streamAggregatesOHLCVServiceV1Client) Subscribe(ctx context.Context, in *aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, opts ...grpc.CallOption) (StreamAggregatesOHLCVServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamAggregatesOHLCVServiceV1_serviceDesc.Streams[0], "/kaikosdk.StreamAggregatesOHLCVServiceV1/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesOHLCVServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesOHLCVServiceV1_SubscribeClient interface {
	Recv() (*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesOHLCVServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesOHLCVServiceV1SubscribeClient) Recv() (*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1, error) {
	m := new(aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesOHLCVServiceV1Server is the server API for StreamAggregatesOHLCVServiceV1 service.
type StreamAggregatesOHLCVServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, StreamAggregatesOHLCVServiceV1_SubscribeServer) error
}

// UnimplementedStreamAggregatesOHLCVServiceV1Server can be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesOHLCVServiceV1Server struct {
}

func (*UnimplementedStreamAggregatesOHLCVServiceV1Server) Subscribe(*aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1, StreamAggregatesOHLCVServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterStreamAggregatesOHLCVServiceV1Server(s *grpc.Server, srv StreamAggregatesOHLCVServiceV1Server) {
	s.RegisterService(&_StreamAggregatesOHLCVServiceV1_serviceDesc, srv)
}

func _StreamAggregatesOHLCVServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_ohlcv_v1.StreamAggregatesOHLCVRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesOHLCVServiceV1Server).Subscribe(m, &streamAggregatesOHLCVServiceV1SubscribeServer{stream})
}

type StreamAggregatesOHLCVServiceV1_SubscribeServer interface {
	Send(*aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1) error
	grpc.ServerStream
}

type streamAggregatesOHLCVServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesOHLCVServiceV1SubscribeServer) Send(m *aggregates_ohlcv_v1.StreamAggregatesOHLCVResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamAggregatesOHLCVServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesOHLCVServiceV1",
	HandlerType: (*StreamAggregatesOHLCVServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesOHLCVServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

// StreamAggregatesSpotExchangeRateServiceV1Client is the client API for StreamAggregatesSpotExchangeRateServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamAggregatesSpotExchangeRateServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotExchangeRateServiceV1_SubscribeClient, error)
}

type streamAggregatesSpotExchangeRateServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamAggregatesSpotExchangeRateServiceV1Client(cc grpc.ClientConnInterface) StreamAggregatesSpotExchangeRateServiceV1Client {
	return &streamAggregatesSpotExchangeRateServiceV1Client{cc}
}

func (c *streamAggregatesSpotExchangeRateServiceV1Client) Subscribe(ctx context.Context, in *aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1, opts ...grpc.CallOption) (StreamAggregatesSpotExchangeRateServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamAggregatesSpotExchangeRateServiceV1_serviceDesc.Streams[0], "/kaikosdk.StreamAggregatesSpotExchangeRateServiceV1/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAggregatesSpotExchangeRateServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamAggregatesSpotExchangeRateServiceV1_SubscribeClient interface {
	Recv() (*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1, error)
	grpc.ClientStream
}

type streamAggregatesSpotExchangeRateServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamAggregatesSpotExchangeRateServiceV1SubscribeClient) Recv() (*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1, error) {
	m := new(aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAggregatesSpotExchangeRateServiceV1Server is the server API for StreamAggregatesSpotExchangeRateServiceV1 service.
type StreamAggregatesSpotExchangeRateServiceV1Server interface {
	// Subscribe
	Subscribe(*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1, StreamAggregatesSpotExchangeRateServiceV1_SubscribeServer) error
}

// UnimplementedStreamAggregatesSpotExchangeRateServiceV1Server can be embedded to have forward compatible implementations.
type UnimplementedStreamAggregatesSpotExchangeRateServiceV1Server struct {
}

func (*UnimplementedStreamAggregatesSpotExchangeRateServiceV1Server) Subscribe(*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1, StreamAggregatesSpotExchangeRateServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterStreamAggregatesSpotExchangeRateServiceV1Server(s *grpc.Server, srv StreamAggregatesSpotExchangeRateServiceV1Server) {
	s.RegisterService(&_StreamAggregatesSpotExchangeRateServiceV1_serviceDesc, srv)
}

func _StreamAggregatesSpotExchangeRateServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAggregatesSpotExchangeRateServiceV1Server).Subscribe(m, &streamAggregatesSpotExchangeRateServiceV1SubscribeServer{stream})
}

type StreamAggregatesSpotExchangeRateServiceV1_SubscribeServer interface {
	Send(*aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1) error
	grpc.ServerStream
}

type streamAggregatesSpotExchangeRateServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamAggregatesSpotExchangeRateServiceV1SubscribeServer) Send(m *aggregates_spot_exchange_rate_v1.StreamAggregatesSpotExchangeRateResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamAggregatesSpotExchangeRateServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamAggregatesSpotExchangeRateServiceV1",
	HandlerType: (*StreamAggregatesSpotExchangeRateServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamAggregatesSpotExchangeRateServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}

// StreamTradesServiceV1Client is the client API for StreamTradesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamTradesServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *trades_v1.StreamTradesRequestV1, opts ...grpc.CallOption) (StreamTradesServiceV1_SubscribeClient, error)
}

type streamTradesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamTradesServiceV1Client(cc grpc.ClientConnInterface) StreamTradesServiceV1Client {
	return &streamTradesServiceV1Client{cc}
}

func (c *streamTradesServiceV1Client) Subscribe(ctx context.Context, in *trades_v1.StreamTradesRequestV1, opts ...grpc.CallOption) (StreamTradesServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamTradesServiceV1_serviceDesc.Streams[0], "/kaikosdk.StreamTradesServiceV1/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTradesServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTradesServiceV1_SubscribeClient interface {
	Recv() (*trades_v1.StreamTradesResponseV1, error)
	grpc.ClientStream
}

type streamTradesServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamTradesServiceV1SubscribeClient) Recv() (*trades_v1.StreamTradesResponseV1, error) {
	m := new(trades_v1.StreamTradesResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTradesServiceV1Server is the server API for StreamTradesServiceV1 service.
type StreamTradesServiceV1Server interface {
	// Subscribe
	Subscribe(*trades_v1.StreamTradesRequestV1, StreamTradesServiceV1_SubscribeServer) error
}

// UnimplementedStreamTradesServiceV1Server can be embedded to have forward compatible implementations.
type UnimplementedStreamTradesServiceV1Server struct {
}

func (*UnimplementedStreamTradesServiceV1Server) Subscribe(*trades_v1.StreamTradesRequestV1, StreamTradesServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterStreamTradesServiceV1Server(s *grpc.Server, srv StreamTradesServiceV1Server) {
	s.RegisterService(&_StreamTradesServiceV1_serviceDesc, srv)
}

func _StreamTradesServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(trades_v1.StreamTradesRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTradesServiceV1Server).Subscribe(m, &streamTradesServiceV1SubscribeServer{stream})
}

type StreamTradesServiceV1_SubscribeServer interface {
	Send(*trades_v1.StreamTradesResponseV1) error
	grpc.ServerStream
}

type streamTradesServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamTradesServiceV1SubscribeServer) Send(m *trades_v1.StreamTradesResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamTradesServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamTradesServiceV1",
	HandlerType: (*StreamTradesServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamTradesServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdk/sdk.proto",
}
